	private int minimo;
	private int giornoPartenza;
	
	public String trovaSequenza(int mese) {
		this.minimo = Integer.MAX_VALUE;
		for(Citta c : citta) {
			c.setRilevamenti(new ArrayList<>(this.dao.getAllRilevamentiLocalitaMese(mese, c.getNome())));
		}
		this.setGiornoPartenza(citta.get(0).getRilevamenti().get(0).getData());
		Map<LocalDate, Citta> sol = this.calcoloCosto_ricorsivo(0, citta, citta.get(0).getRilevamenti().get(0).getData(), new HashMap<LocalDate, Citta>());
		String output = "Costo totale pari a "+ minimo;
		for(LocalDate d : sol.keySet()) {
			output += "\n" + d.toString();
			output += " " + sol.get(d).toString();
		}
			
		return output;
	}
	
	/* in questa soluzione l'operatore non puo' tornare due volte nella stessa citta' */
	private Map<LocalDate, Citta> calcoloCosto_ricorsivo(int costo, List<Citta> cittaMancanti, LocalDate giorno, Map<LocalDate, Citta> sol) {
		// caso terminale
		// le cittÃ  sono state tutte visitate:
		if(cittaMancanti.size()==0) {
			if(minimo > costo)
				minimo = costo;
			//return sol;
		}
		else {
			// caso ricorsivo
			for(int i=giorno.getDayOfMonth(), max=this.giornoPartenza+NUMERO_GIORNI_TOTALI; i<max; i++) {
//				List<Citta> ci = new ArrayList<>(sol.values());
//				if(ci.size()!=0 && ci.get(0).getCounter()>=this.NUMERO_GIORNI_CITTA_MAX) {
//					break; 
//				}
//				else {
//					if(ci.size()!=0)
//						ci.get(ci.size()-1).increaseCounter();
					for(int k=0; k<cittaMancanti.size(); k++) {
						Citta c = cittaMancanti.get(k);
						int aggiunta = 0;
						if(sol.size()!=0)
							aggiunta += COST;
						sol.put(LocalDate.of(giorno.getYear(), giorno.getMonthValue(), i), c);
						c.increaseCounter(3);

						try {
							aggiunta += c.getUmiditaByDate(LocalDate.of(giorno.getYear(), giorno.getMonthValue(), i));
						} catch (UnexpectedException e) {
							e.printStackTrace();
							throw new RuntimeException("Controllare la ricezione del valore di umidita'");
						}
						costo += aggiunta;

						// richiamo la ricorsione
						List<Citta> nuovaCittaMancanti = new ArrayList<>(cittaMancanti);
						nuovaCittaMancanti.remove(c);
						LocalDate nuovoGiorno = LocalDate.of(giorno.getYear(), giorno.getMonthValue(), giorno.getDayOfMonth()+NUMERO_GIORNI_CITTA_CONSECUTIVI_MIN);
						this.calcoloCosto_ricorsivo(costo, nuovaCittaMancanti, nuovoGiorno, sol);

//						//  backtracking
						c.decreaseCounter(3);
						sol.remove(giorno);
						costo-=aggiunta;
					}
				}
//			}
		}

		return sol;
	}
	private void setGiornoPartenza(LocalDate giorno) {
		this.giornoPartenza = giorno.getDayOfMonth();
	}
}
